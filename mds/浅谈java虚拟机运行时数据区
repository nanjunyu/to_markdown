![pic_5e730194.png](http://127.0.0.1:9999/images/pic_5e730194.png)

## 1.1程序计数器 

程序计数器是一块较小的内存空间，他可以看做是当前线程执行字节码行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。

由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都会执行一条线程中的指令。因为，为了线程切换后能恢复正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立储存，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是native方法，这个计数器值则为空，次内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryEoor情况的区域。

## 1.2 java虚拟机栈 

与程序计数器一样，java虚拟机栈也是线程私有的，它的生命周期和线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于储存局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用只至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈出栈的过程。

局部变量表存放了编译期可知类的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用等。其中64位长度的long类型和double类型的数据会占用2个局部变量控件，其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量控件完全是确定的，在方法运行期间不会改变局部变量表的大小。

###  1.3本地方法栈 

本地方法栈(native mehton stack)与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行java方法（字节码服务），而本地方法栈则为虚拟机使用到的native方法(java给其他语言调用提供的接口方法)服务。

###  

###  1.4 java堆 

对于大多数应用来说，java堆是虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。

Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以java堆中还可以细分为：新生代和老年代；再细致一点的有Eden控件、From Survivor空间、To Survivor空间等。

###  1.5方法区 

方法区与堆一样，是各个线程共享的内存区域，它用于储存已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有另一个别名叫Non-Heao做非堆，目的应该是与java堆区分开来。

Java虚拟机规范中堆方法区的限制非常宽松，除了和堆一样不需要连续的内存和可以选择固定大小或者可拓展外，还可以选择不实现垃圾回收。相对而言，垃圾收集行为在这里个区域是比较少出现的，但并非数据进入了方法区就和永久代的名字一样“永久”存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说，这个区域的回收成绩比较难以令人满意，尤其是对类型的卸载，条件相当苛刻，但是这部分区域的回收确实是必要的。在sun公司的bug列表中，曾出现过的若干个严重的BUG就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄露。

###  

###  1.6运行时常量池 

运行时常量池是方法区的一部分，class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。

运行时常量池相对于class文件常量池的另一个重要特征是具备动态性，java语言并不要求常量一定只有编译期才能产生，也就是并非预置于class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量池放入池中，这种特性被开发人员利用得比较多的是String类的intern()方法。

##  1.7直接内存 

直接内存并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用。

在JDK1.4中新加入了NIO(New Input/output)类，引入了一种基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个储存在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在java堆和native堆中来回复制数据。

<table> 
 <tbody> 
  <tr> 
   <td> <p>作者的话</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;本文是《深入理解Java虚拟机》中的其中一篇，如果您有兴趣，请关注该系列的其他文章～</p> <p>&nbsp;&nbsp; 觉得本文不错，顺手点个赞哦～～您的鼓励，是我继续分享知识的强大动力！</p> </td> 
  </tr> 
 </tbody> 
</table>